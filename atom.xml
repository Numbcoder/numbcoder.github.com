<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Numbcoder]]></title>
  <link href="http://seekr.im/atom.xml" rel="self"/>
  <link href="http://seekr.im/"/>
  <updated>2013-07-05T23:45:49+08:00</updated>
  <id>http://seekr.im/</id>
  <author>
    <name><![CDATA[Johnny Wong]]></name>
    <email><![CDATA[wzhao23@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node Version Manager -- NVM]]></title>
    <link href="http://seekr.im/blog/2012/11/09/use-nvm-manage-nodejs-version/"/>
    <updated>2012-11-09T00:00:00+08:00</updated>
    <id>http://seekr.im/blog/2012/11/09/use-nvm-manage-nodejs-version</id>
    <content type="html"><![CDATA[<p>自 <a href="http://nodejs.org/">Node.js</a> 诞生以来，社区一直是相当的火爆，版本更新也是大步向前(这也更 V8 的更新频率有关)，更新活跃是好事。
但是对于开发者来说，却有个头疼的事，就是面对 Node 的版本频繁更新，自己的代码也要跟上节奏，不停的去适应新的 API，甚至是要兼容不同的 Node 版本，所以开发和测试都很麻烦。</p>

<p>之前用 <a href="https://rvm.io/">RVM</a> 来管理多个 Ruby 的版本，感觉很方便。然后我就想 Node 有木有这样一个东西呢，去 Github 一搜，果然有 <code>NVM</code> : <a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></p>

<!-- more -->


<h3>安装</h3>

<p>用 git 将其 <code>clone</code> 到本地 Home 目录下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/creationix/nvm.git ~/nvm
</span></code></pre></td></tr></table></div></figure>


<p>为了将其默认隐藏，所以我 <code>clone</code> 到了 <code>~/.nvm</code> 下</p>

<pre><code>git clone git://github.com/creationix/nvm.git ~/.nvm
</code></pre>

<p>将<code>nvm</code> 加入到 shell 环境，在你的 <code>~/.bashrc</code>, <code>~/.zshrc</code> or <code>~/.profile</code> 中加入</p>

<pre><code> . ~/nvm/nvm.sh
</code></pre>

<p>或者</p>

<pre><code># add nvm  
if [[ -s "$HOME/.nvm/nvm.sh" ]]  ; then   
  source "$HOME/.nvm/nvm.sh" ;  
fi
</code></pre>

<p>重启终端，就可以用 <code>nvm</code> 命令了</p>

<h3>用法</h3>

<p>查看 <code>Node.js</code> 所有可安装的版本</p>

<pre><code>nvm ls-remote
</code></pre>

<p>安装 <code>0.8.8</code> 版本</p>

<pre><code>nvm install 0.8.8
</code></pre>

<p>执行命令后，系统会自动下载 <code>node 0.8.8</code> 的源码，并编译安装。安装成功后，会自动设置为系统默认</p>

<p>查看所有已安装的版本</p>

<pre><code>nvm ls
</code></pre>

<p>卸载 <code>0.8.8</code></p>

<pre><code>nvm uninstall 0.8.8
</code></pre>

<p>要临时使用某个版本(必须先安装了)</p>

<pre><code>nvm use 0.9.3
</code></pre>

<p>在 <code>0.6.18</code> 环境上执行 <code>app.js</code></p>

<pre><code>nvm run 0.6.18 app.js
</code></pre>

<p>将 <code>0.6.18</code> 设置为系统默认 <code>node</code> 环境</p>

<pre><code>nvm alias default 0.6.18
</code></pre>

<p><code>NVM</code> 命令自动补全(目前貌似只支持 <code>bash</code>)</p>

<p>在你的 <code>~/.bashrc</code> 中加入</p>

<pre><code>[[ -r $NVM_DIR/bash_completion ]] &amp;&amp; . $NVM_DIR/bash_completion
</code></pre>

<p>更多用法，查看帮助</p>

<pre><code>nvm help
</code></pre>

<h3>注意</h3>

<p>一些工具可能会调用系统 <code>node</code>, 如编辑器要调用 <code>jshint</code> 等。它们可能默认调用 <code>/usr/bin/node</code>, 所以你可能需要将你的 <code>node</code> 环境 链接过去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我会选择 Vim]]></title>
    <link href="http://seekr.im/blog/2012/09/20/why-i-use-vim/"/>
    <updated>2012-09-20T00:00:00+08:00</updated>
    <id>http://seekr.im/blog/2012/09/20/why-i-use-vim</id>
    <content type="html"><![CDATA[<p><strong> 段子：</strong></p>

<blockquote><p>一群男程序员酒后乱逛，正要集体侵犯一个女子。女子见势不妙，问：你们说说哪个代码编辑器最好？程序员们就地争论了三天三夜不欢而散，女子趁机顺利脱身。。</p></blockquote>

<p>编辑器之争和语言之争一直是程序员圈里讨论的最多的话题。最近也出现了很多不错的编辑器，而我自工作以来一直就用 Vim，Vim 非常古老，诞生于80年代末，估计和我的年龄差不多。近几年，出现了很多优秀漂亮的编辑器，如 Mac 平台的 <a href="http://macromates.com/">TextMate</a> ，还有近期比较火的覆盖3个平台的 <a href="http://www.sublimetext.com/">Sublime Text</a>。这两个编辑器功能都是相当强大的，其中 TextMate 的 Bundle 已经成为其他编辑器的插件接口的标准。</p>

<p>我曾经好多次试图转到 TextMate 和 Sublime Text，因为他们的 UI 做的真的很漂亮，而且社区很活跃，各种 Bundle Plugin 层出不穷。可是几次都失败了，都找不到 Vim 上那种随心所欲的感觉。</p>

<p>下面从功能点上来对比一下（下面指的是有 GUI 的vim，包括 GVim 和 MacVim）：</p>

<!-- more -->


<h3>快捷键</h3>

<p>这个真不用说，Vim 完胜所有编辑器，包括 Emacs。那种完全脱离鼠标的操作，非常高效。</p>

<h3>文件导航</h3>

<p>vim 本身是没有文件导航的。社区也有很多人也曾提出要加入 File Explore 原生支持，这个我曾经也很期待，甚至在 MacVim 的分支上有这么一个版本，带文件导航的，界面类似于 TextMate 1。</p>

<p>插件：<a href="https://github.com/scrooloose/nerdtree">NerdTree</a></p>

<p>NerdTree 看起来很丑，事实上它比原生的那种 Side Bar 要好用很多，比如在 Textmate 中，想要打开一个文件，还要用鼠标去一层一层的点开，而在 NerdTree 中，这些完全可以用快捷键实现，横竖分屏打开，新标签打开，都很容易，文件目录间的跳转也很方便。
配合 <a href="https://github.com/jistr/vim-nerdtree-tabs">vim-nerdtree-tabs</a>，可以打开新标签时，也能自动打开 NerdTree。</p>

<h3>文件快速查找</h3>

<p>这是我曾经最羡慕 TextMate 的一个功能，可以快速打开某个文件。当时有个叫 <a href="https://github.com/wincent/Command-T">Command-T</a> 的插件，就是用来快速文件查找的，大家用的都很兴奋，可是这玩意依赖 Ruby，安装也比较蛮烦。</p>

<p>插件：<a href="https://github.com/kien/ctrlp.vim">Ctrlp</a></p>

<p>Ctrlp 的出现更加坚定了我继续用 Vim 的信心。这个插件相当强大，绝对是神器啊，直接秒杀 TextMate 和 Sublime Text 的文件查找。Ctrlp 除了可以查找当前目录或者用户目录下（可以自己配置）的所有文件，还可以快速查找 Buffer，MRU (Most Recently Used Files)，支持正则匹配，配合 ctags 还能快速定位函数位置。</p>

<p>如果说 Vim 只能选择一个插件，我肯定选择 Ctrlp。</p>

<h3>代码补全</h3>

<p>对于补全，必须要说的是，肯定不能和 IDE 比静态语言的补全，比如和 Eclipse 比 Java 的补全。这个没有意义，这里比较的是动态语言，我用的也基本上都是动态语言，Ruby，Javascript。</p>

<p>插件：<a href="https://github.com/Shougo/neocomplcache">Neocomplcache</a></p>

<p>Neocomplcache 绝对是 Vim 补全插件里最好的，没有之一。是一个日本人 <a href="https://github.com/Shougo">Shougo</a> 写的，配合 <a href="https://github.com/Shougo/Shougo/neosnippet">Shougo/neosnippet</a> 还能进行 snippets 补全，而且可以自定义 snippets。</p>

<p>不得不提的是 <a href="https://github.com/Shougo">Shougo</a> 是一个非常敬业的程序员，写过很多不错的 Vim 插件，可以去他的 Github 上找。Neocomplcache 也是我见过的 Vim 插件里更新最频繁的一个。</p>

<h3>查找与替换</h3>

<p>Vim 只能在 Buffer 中进行单词查找和替换，但是我们经常需要进行目录下的全局查找，这时候就感觉有点不爽了。不过不要忘了 Vim 是诞生在 Unix/Linux，所以没有解决不了的问题。</p>

<p>插件：<a href="https://github.com/mileszs/ack.vim">Ack.vim</a></p>

<p><a href="https://github.com/petdance/ack">Ack</a> 本身是一个 Perl 的lib，Ack 存在的意义是 <code>A replacement for grep for programmers</code>，它还有个很霸气的网站 <a href="http://betterthangrep.com/">http://betterthangrep.com/</a>。素闻 Perl 的正则表达式独步天下，所以诞生出 Ack 这么个强大的东西就不足为奇了。所以在 Ack 面前，<code>grep</code> 真是弱爆了。</p>

<p>在安装 Vim Ack 插件前，要先安装 Ack，具体安装方法也很简单，然后在 Vim 中就可以调用强大的 Ack 了。最重要的是，Ack 搜集结果显示方式也很方便，可以快速的知道目标在哪个文件那一行，而且可以很方便的打开文件定位目标。</p>

<h3>语法检查</h3>

<p>语法检查这个对于写动态语言来说，不是很重要，一般也不太好检查。因为我目前写的最多的是 Javascript，所以我用 <a href="http://www.jshint.com/docs/">jshint</a>，来做一些代码规范性检查，以便于团队代码风格同意。</p>

<p>插件：<a href="https://github.com/scrooloose/syntastic">Syntastic</a></p>

<p>Syntastic 支持多种语言的代码语法格式检查，不过要配合第三方的 Syntax Checker 而已。我就是用 jshint 作为 checker 来检查 Js 代码的。</p>

<h3>跳转神器</h3>

<p>插件：<a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a></p>

<p>EasyMotion 是一个可以让你的键盘操作效率再次提升一个 Level 的神器，如果再能建配上一把 <a href="http://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard">HHKB</a>，你会有一种双手掌控整个世界的感觉。</p>

<h3>插件包管理</h3>

<p>以前 Vim 安装插件非常麻烦。安装一个插件，需要将不同的文件复制到指定的文件夹，有时候还会出现重名的情况，或者是安装了不起作用等。插件升级也
是一个非常麻烦的过程。所以很多新手，在这一步就给难住了。</p>

<p>插件：<a href="https://github.com/gmarik/vundle">Vundle</a></p>

<p>Vundle 其实就是 Vim Bundle 。有了 Vundle 以后，安装，更新、卸载插件都是 So Easy 的事了。</p>

<h3>Others</h3>

<p>Vim 各种插件实在太多了，关键是要选择适合自己的。</p>

<p>我常用的：</p>

<ul>
<li>注释：<a href="https://github.com/scrooloose/nerdcommenter">Nerdcommenter</a></li>
<li>Git：<a href="https://github.com/tpope/vim-fugitive">Fugitive</a></li>
<li>括号补全：<a href="https://github.com/kana/vim-smartinput">Smartinput</a></li>
<li>状态栏增强：<a href="https://github.com/Lokaltog/vim-powerline">Powerline</a></li>
</ul>


<p>具体的配置可以参考我的 <a href="https://github.com/numbcoder/dotfiles/blob/master/.vimrc">.vimrc</a></p>

<h3>结尾</h3>

<p>用 Vim 两三年了，中途也折腾过很长时间的 Emacs，越来越感觉 Vim，Emacs 这种编辑器的强大。因为他们提供的不仅仅是一个编辑器程序，而是一门语言的 Ecosystem，在这个环境下，
你可以实现你的想法，想要什么功能，自己写一个就 OK 了。。</p>

<p><strong> So, Love your Keyboard, Enjoy Coding! </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go On Bloging]]></title>
    <link href="http://seekr.im/blog/2012/08/08/go-on-bloging/"/>
    <updated>2012-08-08T00:00:00+08:00</updated>
    <id>http://seekr.im/blog/2012/08/08/go-on-bloging</id>
    <content type="html"><![CDATA[<p>写这篇博文的时候，我不禁狠狠的鄙视自己，貌似这两年来折腾过的博客就有好几个了，却没写几篇什么像样的文章，以前写了一些，也懒得找回了，真是折腾狂啊。回顾一下我的折腾经历。</p>

<h2>第三方博客平台</h2>

<h3>JavaEye</h3>

<p>那时候还是在学校，应该是大二的时候，自己刚刚开始爱上写代码，偶尔就会去上些技术网站，什么 CSDN，JavaEye 之类的，看一些新闻或是别人写的技术文章，然后自己也开始琢磨在写一些小心得，技术笔记之类。当时是落户在 JavaEye，我比较它的代码高亮，还有行号。我记得当时写的比较多的是，一些数据结构的实现，什么冒泡排序，二叉树之类的。</p>

<!-- more -->


<h3>Blogspot</h3>

<p>JavaEye 用来一段时候后，我觉得不过瘾，因为很多东西不能自定义，例如主题之类的，然后我发现了这个，貌似是google的，好像也叫 Blogger，忘了，好久不上了。反正当时这玩意是可以自定义主题的，可以自己改 <code>css</code>，但是那时候还不怎么懂 css，所以折腾了很久。印象深刻的是，为了能有个代码高亮，弄来好久，最后找到了 <code>google code pretty</code> 的 js 库。</p>

<p>当然这个不久就被我弃用了，原因是被墙了。。。</p>

<h2>DIY</h2>

<h3>Google App Engine</h3>

<p>貌似是在大四的时候，我知道了 GAE 这个东西，而且免费额度足以干很多事了，最重要的是还没被墙。这也是我最初接触到的当时所谓云计算的产品了，感觉确实很神奇啊，所以就想尝试，当时想到的就是弄个博客玩玩，而且那时候貌似还真的很流行把 Blog 架在 GAE 上面，经常能看到一些人的 Blog 底部有 GAE 的小飞机图标，什么 <code>Host on GAE</code> 之类的，很流弊的样子，云计算有木有啊！！</p>

<p>我当时甚至还想毕业设计搞个关于 GAE 的东西。可是貌似在那一年，Google 开始跟中国政府闹了，相继被 CCAV 暗算，还有后来的服务器遭到蓝翔技校的攻击之类的，Google 的服务开始慢慢被墙。</p>

<p>不过不得不说的是，GAE 也是被国内的一些开发者给毁的，很多人在上面放一些带有敏感词内容的网站，还有架 Twitter 代理之类的，so，不挂才怪！
后来的 Heroku 基本上也是因为同样的原因，遭到 GFW 的特别照顾。。</p>

<h3>WordPress</h3>

<p>对，你没有听错，我也用过 wordpress！对于我这个半点 PHP 都不懂的人来说，早已是对 wordpress 垂涎已久啊，我羡慕那丰富多彩的主题，和各种第三方插件。在一个懂 PHP 的同事帮助下，部署了一个wordpress 到他的主机上，当时还买了个域名。。后来就是各种找主题啊，什么的。。因为主机的不稳定，经常访问不到，而我又没有权限，最后没管了。。</p>

<h2>自己写博客系统</h2>

<h3>Toto</h3>

<p>大约是在2010年末，我在 <a href="https://github.com">Githug</a> 上看到来一个叫 <a href="https://github.com/cloudhead/toto">toto</a> 的，也是用 markdown 的方式写作，当时也是知道 <a href="https://github.com/mojombo/jekyll">Jekyll</a> 的，但是感觉 toto 比 jekyll 优雅，好理解。但是功能实在太弱了，不支持分类和 tag，没办法，然后我就自己 hack，自己添加了这两个功能。我依稀还记得hack 这两个功能，折腾到来凌晨2点多。部署了一个 <a href="http://numbcoder.heroku.com/">Demo</a> 到 Heroku 上，貌似现在还能访问。</p>

<p>折腾完这个，后来转向做移动开发来，那段时间很忙，这个几乎被遗忘了。。</p>

<h3>Sonar</h3>

<p>Sonar 是越狱中最后一直要找的那个盒子，很神秘。所以我用这个来命名来我的新项目，一个 Rails + MongoDB 的博客系统。</p>

<p><a href="https://github.com/numbcoder/sonar">Sonar</a> 这个完全是练手项目，没有任何愿景或是取代谁。当时是因为很长一段时间没写 <code>Ruby</code> 代码了，所以就随便写一个练练手，这个大约是断断续续花了几天吧，完成来基本的博客功能，然后就没做了。</p>

<h2>回归</h2>

<h3>静态博客</h3>

<p>其实我一直不太喜欢静态博客，我不喜欢它生成一堆的 <code>html</code> 文件，特别是当文章很多的时候，就比较麻烦。但是我很喜欢 Git + Markdown 的写作方式，toto 是将所有的 markdown 文件全部加载，读到内存中，所以文件多了或者是访问量大了，就很慢。jekyll 虽然也是读所有的文件，但是它转化成了静态文件，也就是说一劳永逸，性能肯定好，而且可以免费放在github 上，这个还是很方便的，至少不用担心宕机或数据丢失吧。</p>

<h3>Octopress</h3>

<p>提到 Jekyll ，就不得不说 <a href="https://github.com/imathis/octopress">Octopress</a>，这个是相当强大，用了 <a href="https://github.com/nex3/sass">sass</a>，所以改个主题什么的相当方便。有很多开发者都讲博客迁移到来 octopress 上来。</p>

<p>这个我也是稍微用了一下，感觉太重了，不是很喜欢。</p>

<h3>Jekyll-bootstrap</h3>

<p><a href="https://github.com/plusjade/jekyll-bootstrap">Jekyll-Bootstrap</a>
这个比 Octopress 轻量很多，也能很方便的换主题。可以很方便的配置评论系统，GA 等。这个我比较推荐。</p>

<h3>Jekyll</h3>

<p>我现在的，基本上是在 jekyll-bootstrap 的基础上精简而来的，不想要太多没用的功能，界面不能太花哨，我希望 UI 能够很干净，有很好的阅读体验。</p>

<h2>最后</h2>

<p>最近工作稍微轻松点，所以希望自己能好好写点文章，其实有很多想写的。</p>

<p><strong> Think diff, think independence! </strong></p>
]]></content>
  </entry>
  
</feed>
